{"version":3,"sources":["Components/Api/Api.js","Components/Redux/mainReducer.js","Components/Redux/Card-reducers.jsx","Components/Tools/Converter.jsx","Components/Tools/GraphChart.jsx","Components/DetailPage/DetailPage.jsx","Components/CardComponent/CardComponent.jsx","Components/MainBody/SearchFormItem.jsx","Components/MainBody/MainBody.jsx","App.js","reportWebVitals.js","Components/Redux/Redux-store.js","index.js"],"names":["instance","axios","baseURL","API_KEY","currentWeatherApi","name","get","then","res","data","citiesId","lat","lon","getImage","icon","getFlag","country","IS_LOADING","SET_ERROR","initialState","isLoading","error","toggleIsLoading","type","setError","ADD_CARD","DELETE_CARD","UPDATE_BODY","SET_DETAILS_PAGE","cities","detailsPage","addCard","card","getCity","action","dispatch","getState","a","result","isCopyName","find","el","id","convertTime","hourUnix","date","Date","hour","getHours","minutes","getMinutes","GraphChart","React","memo","props","detailCard","dataHourly","hourly","map","value","dt","temp","Math","round","i","push","Grid","item","style","textAlign","width","height","chartType","loader","options","hAxis","title","vAxis","legend","backgroundColor","colors","series","0","color","useStyles","makeStyles","theme","root","flexGrow","marginLeft","content","marginTop","background","padding","boxShadow","maxWidth","button","fontSize","graph","flag","DetailPage","history","useHistory","useDispatch","classes","useSelector","state","city","weather","sys","split","c","toUpperCase","toLowerCase","join","sunrise","sunset","useEffect","coord","dataRound","className","alt","src","main","Button","onClick","container","spacing","xs","feels_like","humidity","pressure","temp_max","temp_min","wind","speed","deg","cursor","paper","palette","text","secondary","CityCard","cityId","CardContent","Paper","variant","startIcon","form","margin","SearchFormItem","formik","useFormik","initialValues","onSubmit","values","resetForm","handleSubmit","Input","placeholder","getFieldProps","onChange","handleChange","disabled","minWidth","MainBody","cardAdd","App","localDataCards","localStorage","getItem","JSON","parse","reverse","list","forEach","getCurrentByAsk","setItem","stringify","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","require","cardsNum","findIndex","filter","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d895b32.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://api.openweathermap.org/data/2.5/`\r\n});\r\n\r\nconst API_KEY = '85132d4ddae160c1f8dcd7eea2cb7f41';\r\n\r\n\r\nexport const currentWeatherApi = {\r\n    getCurrentData(name) {\r\n        return instance.get(`weather?appid=${API_KEY}&units=metric&q=${name}`)\r\n            .then(res => res.data)\r\n    },\r\n    getCurrentWeatherByAsk(citiesId) {\r\n        return instance.get(`group?id=${citiesId}&appid=${API_KEY}&units=metric`)\r\n            .then(res => res.data)\r\n    },\r\n    getWeatherByHours(lat, lon) {\r\n        return instance.get(`onecall?lat=${lat}&lon=${lon}&exclude=daily,alerts,minutely&appid=${API_KEY}&units=metric`)\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\nexport const getImage = (icon)=>{\r\n    return `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n}\r\n\r\nexport const getFlag = (country) => {\r\n    return `https://openweathermap.org/images/flags/${country}.png`\r\n}","const IS_LOADING = 'TOGGLE_IS_LOADING'\r\nconst SET_ERROR = 'SET_ERROR'\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    error: null\r\n}\r\n\r\nexport const mainReducer = (state = initialState, action)  => {\r\n    switch (action.type) {\r\n        case IS_LOADING: {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case SET_ERROR: {\r\n            return {...state, error: action.error}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleIsLoading = (isLoading) => ({type: IS_LOADING, isLoading})\r\nexport const setError = (error) => ({type: SET_ERROR, error})","import React from \"react\";\r\nimport {currentWeatherApi} from \"../Api/Api\";\r\nimport {setError, toggleIsLoading} from \"./mainReducer\";\r\n\r\nconst ADD_CARD = \"ADD_CARD\";\r\nconst DELETE_CARD = \"DELETE_CARD\";\r\nconst UPDATE_BODY = \"UPDATE_BODY\";\r\nconst SET_DETAILS_PAGE = \"SET_DETAILS_PAGE\";\r\n\r\nconst initialState = {\r\n    cities: [],\r\n    detailsPage: {}\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_BODY:\r\n            const cardsNum = state.cities.findIndex(el => el.id === action.card.id)\r\n            state.cities[cardsNum] = action.card\r\n            return {\r\n                ...state,\r\n                cities: [...state.cities]\r\n            }\r\n        case  ADD_CARD: {\r\n            return {\r\n                ...state,\r\n                cities: [action.card, ...state.cities]\r\n            }\r\n        }\r\n        case  DELETE_CARD: {\r\n            return {\r\n                ...state,\r\n                cities: state.cities.filter(el => el.id !== action.citiesId)\r\n            }\r\n        }\r\n        case  SET_DETAILS_PAGE: {\r\n            return {\r\n                ...state,\r\n                detailsPage: action.detailsPage\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nexport const addCard = (card) => ({type: ADD_CARD, card});\r\nexport const updateBody = (card) => ({type: UPDATE_BODY, card});\r\nexport const setDetailPage = (detailsPage) => ({type: SET_DETAILS_PAGE, detailsPage});\r\nexport const deleteCard = (citiesId) => ({type: DELETE_CARD, citiesId});\r\n\r\n\r\nexport const getCity = (name, action) => {\r\n    return async (dispatch,getState) => {\r\n        try {\r\n            dispatch(toggleIsLoading(true))\r\n            let result = await currentWeatherApi.getCurrentData(name)\r\n            if (action === \"ADD\") {\r\n                const isCopyName = getState().cities.cities.find(el => el.id === result.id)\r\n                isCopyName ? dispatch(setError(\"City was picked\")) : dispatch(addCard(result))\r\n            } else if (action === \"UPDATE\") {\r\n                dispatch(updateBody(result))\r\n            }\r\n            dispatch(toggleIsLoading(false))\r\n        } catch (err) {\r\n            dispatch(setError(\"Not found. Try again.\"))\r\n            dispatch(toggleIsLoading(false))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCurrentByAsk = (citiesId) => async (dispatch) => {\r\n    try {\r\n        dispatch(toggleIsLoading(true))\r\n        let result = await currentWeatherApi.getCurrentWeatherByAsk(citiesId)\r\n        result.list.forEach(el => dispatch(addCard(el)))\r\n        dispatch(toggleIsLoading(false))\r\n    } catch (err) {\r\n        dispatch(setError(\"Error\"))\r\n        dispatch(toggleIsLoading(false))\r\n    }\r\n}\r\n\r\nexport const getDetails = (lat, lon) => async (dispatch) => {\r\n    try {\r\n        dispatch(toggleIsLoading(true))\r\n        let result = await currentWeatherApi.getWeatherByHours(lat, lon)\r\n        dispatch(setDetailPage(result))\r\n        dispatch(toggleIsLoading(false))\r\n    } catch (err) {\r\n        dispatch(setError(\"Error\"))\r\n        dispatch(toggleIsLoading(false))\r\n    }\r\n}\r\n\r\n","\r\n\r\n\r\nexport const convertTime = (hourUnix) => {\r\n    let date = new Date(hourUnix * 1000)\r\n    let hour = date.getHours()\r\n    let minutes = date.getMinutes()\r\n    return hour < 10\r\n        ? minutes < 10\r\n            ? `0${hour}:0${minutes}`\r\n            : `0${hour}:${minutes}`\r\n        : `${hour}:00`\r\n}","import React from 'react'\r\nimport {Chart} from 'react-google-charts'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {convertTime} from \"./Converter\";\r\n\r\n\r\nexport const GraphChart = React.memo((props) => {\r\n        let {detailCard} = props\r\n        const dataRound = (value) => {\r\n            return Math.round(value)\r\n        }\r\n\r\n        let dataHourly = detailCard.hourly?.map(el => {\r\n            let hour = convertTime(el.dt)\r\n            let temp = dataRound(el.temp)\r\n            let array = [hour, temp]\r\n            return array\r\n        })\r\n\r\n        let data = [['Hour', 'Temperature']]\r\n\r\n        if (dataHourly) {\r\n            for (let i = 0; i < 24; i++) {\r\n                data.push(dataHourly[i])\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Grid item style={{textAlign: 'center'}}>\r\n                <Chart\r\n                    width={'600px'}\r\n                    height={'400px'}\r\n                    chartType='ColumnChart'\r\n                    loader={<div>Loading Chart</div>}\r\n                    data={data}\r\n                    options={{\r\n                        hAxis: {title: 'Hour'},\r\n                        vAxis: {title: 'Temperature'},\r\n                        legend: 'none',\r\n                        title: \"Hourly temperature changing\",\r\n                        backgroundColor: 'transparent',\r\n                        colors: [\"white\", \"white\",],\r\n                        series: {\r\n                            0: {color: '#d7d120'},\r\n                        }\r\n                    }}\r\n                />\r\n            </Grid>\r\n        )\r\n    }\r\n)\r\n","import React, {useEffect} from \"react\";\r\nimport {Button, Grid, makeStyles} from \"@material-ui/core\";\r\nimport {useHistory} from \"react-router\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getDetails} from \"../Redux/Card-reducers\";\r\nimport {getFlag, getImage} from \"../Api/Api\";\r\nimport {convertTime} from \"../Tools/Converter\";\r\nimport {GraphChart} from \"../Tools/GraphChart\";\r\nimport \"./DetailPage.css\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        textAlign: \"left\",\r\n        marginLeft: \"15px\"\r\n    },\r\n    content: {\r\n        marginTop: \"30px\",\r\n        background: \"rgb(48,107,101,0.8)\",\r\n        color: \"white\",\r\n        padding: \"15px\",\r\n        boxShadow: \"2px 2px 5px 2px rgb(169, 169, 101)\",\r\n        maxWidth: \"200px\"\r\n    },\r\n    button: {\r\n        background: \"rgb(48,107,101,0.8)\",\r\n        color: \"white\",\r\n        fontSize: \"18px\"\r\n    },\r\n    graph: {\r\n        background: \"rgb(48,107,101,0.8)\",\r\n        marginTop: \"40px\",\r\n        maxWidth: \"600px\"\r\n    },\r\n    flag:{\r\n        width:\"50px\"\r\n    }\r\n}));\r\n\r\n\r\nexport const DetailPage = React.memo((props) => {\r\n        const history = useHistory()\r\n        const dispatch = useDispatch()\r\n        const classes = useStyles();\r\n\r\n\r\n        const cities = useSelector(state => state.cities.cities)\r\n        const detailCard = useSelector(state => state.cities.detailsPage)\r\n\r\n        const city = cities.find(el => el.name === cities[0].name)\r\n        const icon = city.weather[0].icon\r\n\r\n        const country = city.sys.country\r\n            .split(\"\")\r\n            .map(c => (c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()))\r\n            .join(\"\");\r\n        let sunrise = convertTime(city.sys.sunrise);\r\n        let sunset = convertTime(city.sys.sunset);\r\n\r\n        useEffect(() => {\r\n            if (city) {\r\n                dispatch(getDetails(city.coord.lat, city.coord.lon))\r\n            }\r\n        }, [city, dispatch])\r\n\r\n        const redirectToMAin = () => {\r\n            history.push(`/`)\r\n        }\r\n        const dataRound = (value) => {\r\n            return Math.round(value)\r\n        }\r\n        return (\r\n            <div className=\"mainContentWrapp\">\r\n                <h1>{city.name}</h1>\r\n                <img alt=\"countryIco\" src={getFlag(country)} className={classes.flag}/>\r\n                <h2> Temperature: {dataRound(city.main.temp)} °C</h2>\r\n                <Button onClick={redirectToMAin} className={classes.button}>\r\n                    Back to all cards\r\n                </Button>\r\n                <Grid container spacing={4} className={classes.root}>\r\n                    <Grid item xs={5}>\r\n                        <div className={classes.content}>\r\n                            <div>Feels like: {dataRound(city.main.feels_like)} C</div>\r\n                            <div>Humidity: {city.main.humidity} %</div>\r\n                            <div>Pressure: {city.main.pressure}</div>\r\n                            <div>Max temperature: {dataRound(city.main.temp_max)} °C</div>\r\n                            <div>Min temperature: {dataRound(city.main.temp_min)} °C</div>\r\n                            <div>Wind: {city.wind.speed} m/s {city.wind.deg} degree</div>\r\n                            <div>Sunrise: {sunrise}</div>\r\n                            <div>Sunset: {sunset}</div>\r\n                            <img alt=\"weatherIco\" src={getImage(icon)}/>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={3} className={classes.graph}>\r\n                        <GraphChart detailCard={detailCard}/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import React from \"react\";\r\nimport {Button, CardContent, Grid, makeStyles, Paper} from \"@material-ui/core\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport RefreshRoundedIcon from '@material-ui/icons/RefreshRounded'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deleteCard, getCity} from \"../Redux/Card-reducers\";\r\nimport {getFlag, getImage} from \"../Api/Api\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        cursor: 'pointer',\r\n\r\n\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'left',\r\n        color: theme.palette.text.secondary,\r\n        cursor: 'pointer',\r\n        maxWidth: \"300px\",\r\n        backgroundColor:\"rgb(166, 217, 155)\"\r\n    },\r\n    button: {\r\n        backgroundColor: \"blue\",\r\n        cursor: \"pointer\"\r\n    }\r\n}));\r\n\r\nexport const CityCard = React.memo((props) => {\r\n\r\n    let {name, main, wind, icon, cityId, weather,sys} = props\r\n    const country = sys.country\r\n        .split(\"\")\r\n        .map(c => (c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()))\r\n        .join(\"\");\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteCardS = () => {\r\n        dispatch(deleteCard(cityId))\r\n    }\r\n\r\n    const refreshCard = () => {\r\n        dispatch(getCity(name, 'UPDATE'))\r\n    }\r\n\r\n    const redirect = () => {\r\n        history.push(`/city/${name}`)\r\n    }\r\n    const dataRound = (value) => {\r\n        return Math.round(value)\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <CardContent>\r\n                <Paper className={classes.paper} >\r\n                    <h3> {name} <img alt=\"countryIco\" src={getFlag(country)}/></h3>\r\n                    <Grid container spacing={2} onClick={redirect}>\r\n                        <Grid item xs={6}>\r\n                            <div>Temperature: {dataRound(main.temp)} °C</div>\r\n                            <div>Sky: {weather[0].main} </div>\r\n                            <div>Wind: {dataRound(wind.speed)} m/s</div>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <img alt=\"weatherIco\" src={getImage(icon)}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={refreshCard}\r\n                        startIcon={<RefreshRoundedIcon/>}>\r\n                        Reload Data\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={deleteCardS}\r\n                        className={classes.button}\r\n                        startIcon={<DeleteIcon/>}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </Paper>\r\n            </CardContent>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {getCity} from \"../Redux/Card-reducers\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Button, Input, makeStyles} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        color: \"white\",\r\n        background: \"blue\"\r\n    },\r\n    form: {\r\n        background: \"rgb(54,102,191,0.8)\",\r\n        margin: \"15px\",\r\n        padding: \"15px\"\r\n    }\r\n});\r\n\r\nexport const SearchFormItem = React.memo(()=>{\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const isLoading = useSelector(state => state.main.isLoading)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(getCity(values.name, 'ADD'))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit} className={classes.form}>\r\n                <Input\r\n                    placeholder='Type here the city name' {...formik.getFieldProps('name')}\r\n                    onChange={formik.handleChange} value={formik.values.name}\r\n                />\r\n                <Button className={classes.button} type='submit' disabled={isLoading || !formik.values.name}\r\n                        variant='contained' color='primary'> Add City</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React from \"react\";\r\nimport {CityCard} from \"../CardComponent/CardComponent\";\r\nimport \"./MainBody.css\";\r\n\r\nimport {SearchFormItem} from \"./SearchFormItem\";\r\nimport {Grid, makeStyles} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n    }\r\n});\r\n\r\nexport const MainBody = React.memo(props => {\r\n    const classes = useStyles();\r\n\r\n    let cardAdd = props.cities.map(cities =>\r\n        <Grid item xs={4}>\r\n            <Grid item>\r\n                <CityCard name={cities.name}\r\n                          main={cities.main}\r\n                          cityId={cities.id}\r\n                          wind={cities.wind}\r\n                          weather={cities.weather}\r\n                          icon={cities.weather[0].icon}\r\n                          sys={cities.sys}/>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n\r\n    return (\r\n        <div className=\"mainWrap\">\r\n            <h1>Welcome to the weather widget!</h1>\r\n            <h3>Click below to set your city</h3>\r\n            <SearchFormItem/>\r\n            <Grid container className={classes.root} spacing={2}>\r\n                {cardAdd}\r\n            </Grid>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import './App.css';\nimport {DetailPage} from \"./Components/DetailPage/DetailPage\";\nimport {Route, Switch} from \"react-router\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useEffect} from \"react\";\nimport {getCurrentByAsk} from \"./Components/Redux/Card-reducers\";\nimport {MainBody} from \"./Components/MainBody/MainBody\";\n\n\nfunction App() {\n\n    const cities = useSelector(state => state.cities.cities)\n    const dispatch = useDispatch()\n\n\n    useEffect(() => {\n        const localDataCards = localStorage.getItem('cityCards')\n        if (localDataCards && localDataCards !== '[]') {\n            let citiesId = JSON.parse(localDataCards).reverse().join()\n            dispatch(getCurrentByAsk(citiesId))\n        }\n    }, [dispatch])\n\n    useEffect(() => {\n        localStorage.setItem('cityCards', JSON.stringify(cities.map((el) => el.id)))\n    }, [cities])\n\n    return (\n        <div className=\"App\" >\n            <Switch>\n                <Route path=\"/city/:name\"> <DetailPage/> </Route>\n                <Route exact path=\"/\"> <MainBody cities={cities}/> </Route>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {mainReducer} from \"./mainReducer\";\r\nimport {cardsReducer} from \"./Card-reducers\";\r\n\r\nconst {combineReducers} = require(\"redux\");\r\n\r\nlet reducers = combineReducers({\r\n    cities: cardsReducer,\r\n    main: mainReducer\r\n})\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./Components/Redux/Redux-store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n            <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}