{"version":3,"sources":["Components/Api/Api.js","Components/Redux/mainReducer.js","Components/Redux/Card-reducers.jsx","Components/Assets/preloader.svg","Components/Tools/Preloader.jsx","Components/CardComponent/CardComponent.jsx","Components/MainBody/SearchFormItem.jsx","Components/Assets/day.svg","Components/MainBody/MainBody.jsx","Components/Tools/Converter.jsx","Components/Tools/GraphChart.jsx","Components/DetailPage/DetailPage.jsx","Components/DetailPage/DetailPAgeSlider.jsx","App.js","reportWebVitals.js","Components/Redux/Redux-store.js","index.js"],"names":["instance","axios","baseURL","API_KEY","currentWeatherApi","name","get","then","res","data","citiesId","lat","lon","getImage","icon","getFlag","country","IS_LOADING","SET_ERROR","initialState","isLoading","error","toggleIsLoading","type","setError","ADD_CARD","DELETE_CARD","UPDATE_BODY","SET_DETAILS_PAGE","cities","detailsPage","addCard","card","getCity","action","dispatch","getState","a","result","isCopyName","find","el","id","getCurrentByAsk","list","forEach","Preloader","src","preloader","alt","useStyles","makeStyles","theme","root","flexGrow","cursor","paper","padding","spacing","textAlign","color","palette","text","secondary","maxWidth","backgroundColor","button","CityCard","React","memo","props","main","wind","cityId","weather","sys","split","map","c","toUpperCase","toLowerCase","join","classes","history","useHistory","useDispatch","dataRound","value","Math","round","useSelector","state","className","CardContent","Paper","Grid","container","onClick","push","item","xs","temp","speed","Button","variant","startIcon","background","form","margin","SearchFormItem","formik","useFormik","initialValues","onSubmit","values","resetForm","handleSubmit","Input","placeholder","getFieldProps","onChange","handleChange","disabled","minWidth","MainBody","cardAdd","MainIco","convertTime","hourUnix","date","Date","hour","getHours","minutes","getMinutes","GraphChart","detailCard","dataHourly","hourly","dt","i","style","width","height","chartType","loader","options","hAxis","title","vAxis","legend","series","0","marginLeft","content","boxShadow","fontSize","graph","marginTop","DetailPage","city","sunrise","sunset","useEffect","coord","feels_like","humidity","pressure","temp_max","temp_min","deg","appBar","position","flex","Transition","forwardRef","ref","Slide","direction","FullScreenDialog","localDataCards","localStorage","getItem","JSON","parse","reverse","setItem","stringify","useState","open","setOpen","handleClose","Dialog","fullScreen","onClose","TransitionComponent","AppBar","Toolbar","IconButton","edge","aria-label","Typography","flag","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","require","cardsNum","findIndex","filter","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aef8201f.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://api.openweathermap.org/data/2.5/`\r\n});\r\n\r\nconst API_KEY = '85132d4ddae160c1f8dcd7eea2cb7f41';\r\n\r\n\r\nexport const currentWeatherApi = {\r\n    getCurrentData(name) {\r\n        return instance.get(`weather?appid=${API_KEY}&units=metric&q=${name}`)\r\n            .then(res => res.data)\r\n    },\r\n    getCurrentWeatherByAsk(citiesId) {\r\n        return instance.get(`group?id=${citiesId}&appid=${API_KEY}&units=metric`)\r\n            .then(res => res.data)\r\n    },\r\n    getWeatherByHours(lat, lon) {\r\n        return instance.get(`onecall?lat=${lat}&lon=${lon}&exclude=daily,alerts,minutely&appid=${API_KEY}&units=metric`)\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\nexport const getImage = (icon)=>{\r\n    return `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n}\r\n\r\nexport const getFlag = (country) => {\r\n    return `https://openweathermap.org/images/flags/${country}.png`\r\n}","const IS_LOADING = 'TOGGLE_IS_LOADING'\r\nconst SET_ERROR = 'SET_ERROR'\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    error: null\r\n}\r\n\r\nexport const mainReducer = (state = initialState, action)  => {\r\n    switch (action.type) {\r\n        case IS_LOADING: {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case SET_ERROR: {\r\n            return {...state, error: action.error}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleIsLoading = (isLoading) => ({type: IS_LOADING, isLoading})\r\nexport const setError = (error) => ({type: SET_ERROR, error})","import React from \"react\";\r\nimport {currentWeatherApi} from \"../Api/Api\";\r\nimport {setError, toggleIsLoading} from \"./mainReducer\";\r\n\r\nconst ADD_CARD = \"ADD_CARD\";\r\nconst DELETE_CARD = \"DELETE_CARD\";\r\nconst UPDATE_BODY = \"UPDATE_BODY\";\r\nconst SET_DETAILS_PAGE = \"SET_DETAILS_PAGE\";\r\n\r\nconst initialState = {\r\n    cities: [],\r\n    detailsPage: {}\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_BODY:\r\n            const cardsNum = state.cities.findIndex(el => el.id === action.card.id)\r\n            state.cities[cardsNum] = action.card\r\n            return {\r\n                ...state,\r\n                cities: [...state.cities]\r\n            }\r\n        case  ADD_CARD: {\r\n            return {\r\n                ...state,\r\n                cities: [action.card, ...state.cities]\r\n            }\r\n        }\r\n        case  DELETE_CARD: {\r\n            return {\r\n                ...state,\r\n                cities: state.cities.filter(el => el.id !== action.citiesId)\r\n            }\r\n        }\r\n        case  SET_DETAILS_PAGE: {\r\n            return {\r\n                ...state,\r\n                detailsPage: action.detailsPage\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nexport const addCard = (card) => ({type: ADD_CARD, card});\r\nexport const updateBody = (card) => ({type: UPDATE_BODY, card});\r\nexport const setDetailPage = (detailsPage) => ({type: SET_DETAILS_PAGE, detailsPage});\r\nexport const deleteCard = (citiesId) => ({type: DELETE_CARD, citiesId});\r\n\r\n\r\nexport const getCity = (name, action) => {\r\n    return async (dispatch,getState) => {\r\n        try {\r\n            dispatch(toggleIsLoading(true))\r\n            let result = await currentWeatherApi.getCurrentData(name)\r\n            if (action === \"ADD\") {\r\n                const isCopyName = getState().cities.cities.find(el => el.id === result.id)\r\n                isCopyName ? dispatch(setError(\"City was picked\")) : dispatch(addCard(result))\r\n            } else if (action === \"UPDATE\") {\r\n                dispatch(updateBody(result))\r\n            }\r\n            dispatch(toggleIsLoading(false))\r\n        } catch (err) {\r\n            dispatch(setError(\"Not found. Try again.\"))\r\n            dispatch(toggleIsLoading(false))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCurrentByAsk = (citiesId) => async (dispatch) => {\r\n    try {\r\n        dispatch(toggleIsLoading(true))\r\n        let result = await currentWeatherApi.getCurrentWeatherByAsk(citiesId)\r\n        result.list.forEach(el => dispatch(addCard(el)))\r\n        dispatch(toggleIsLoading(false))\r\n    } catch (err) {\r\n        dispatch(setError(\"Error\"))\r\n        dispatch(toggleIsLoading(false))\r\n    }\r\n}\r\n\r\nexport const getDetails = (lat, lon) => async (dispatch) => {\r\n    try {\r\n        dispatch(toggleIsLoading(true))\r\n        let result = await currentWeatherApi.getWeatherByHours(lat, lon)\r\n        dispatch(setDetailPage(result))\r\n        dispatch(toggleIsLoading(false))\r\n    } catch (err) {\r\n        dispatch(setError(\"Error\"))\r\n        dispatch(toggleIsLoading(false))\r\n    }\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/preloader.f608a838.svg\";","import React from \"react\";\r\nimport preloader from \"../Assets/preloader.svg\"\r\n\r\nexport const Preloader = () => {\r\n    return <div>\r\n        <img src={preloader} alt=\"preloader\"/>\r\n    </div>\r\n}","import React from \"react\";\r\nimport {Button, CardContent, Grid, makeStyles, Paper} from \"@material-ui/core\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport RefreshRoundedIcon from '@material-ui/icons/RefreshRounded'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {deleteCard, getCity} from \"../Redux/Card-reducers\";\r\nimport {getFlag, getImage} from \"../Api/Api\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {Preloader} from \"../Tools/Preloader\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        cursor: 'pointer',\r\n\r\n\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'left',\r\n        color: theme.palette.text.secondary,\r\n        cursor: 'pointer',\r\n        maxWidth: \"300px\",\r\n        backgroundColor:\"rgb(166, 217, 155)\"\r\n    },\r\n    button: {\r\n        backgroundColor: \"blue\",\r\n        cursor: \"pointer\"\r\n    }\r\n}));\r\n\r\nexport const CityCard = React.memo((props) => {\r\n\r\n    let {name, main, wind, icon, cityId, weather,sys} = props\r\n    const country = sys.country\r\n        .split(\"\")\r\n        .map(c => (c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()))\r\n        .join(\"\");\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteCardS = () => {\r\n        dispatch(deleteCard(cityId))\r\n    }\r\n\r\n    const refreshCard = () => {\r\n        dispatch(getCity(name, 'UPDATE'))\r\n    }\r\n\r\n    const redirect = () => {\r\n        history.push(`/city/${name}`)\r\n    }\r\n    const dataRound = (value) => {\r\n        return Math.round(value)\r\n    }\r\n    const isLoading = useSelector(state => state.main.isLoading);\r\n    return (\r\n        <div className={classes.root}>\r\n            <CardContent>\r\n                {isLoading && <div><Preloader/></div>}\r\n                <Paper className={classes.paper} >\r\n                    <h3> {name} <img alt=\"countryIco\" src={getFlag(country)}/></h3>\r\n                    <Grid container spacing={2} onClick={redirect}>\r\n                        <Grid item xs={6}>\r\n                            <div>Temperature: {dataRound(main.temp)} °C</div>\r\n                            <div>Sky: {weather[0].main} </div>\r\n                            <div>Wind: {dataRound(wind.speed)} m/s</div>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <img alt=\"weatherIco\" src={getImage(icon)}/>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={refreshCard}\r\n                        startIcon={<RefreshRoundedIcon/>}>\r\n                        Reload Data\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={deleteCardS}\r\n                        className={classes.button}\r\n                        startIcon={<DeleteIcon/>}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </Paper>\r\n            </CardContent>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {getCity} from \"../Redux/Card-reducers\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Button, Input, makeStyles} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        color: \"white\",\r\n        background: \"blue\"\r\n    },\r\n    form: {\r\n        background: \"rgb(54,102,191,0.8)\",\r\n        margin: \"15px\",\r\n        padding: \"15px\"\r\n    }\r\n});\r\n\r\nexport const SearchFormItem = React.memo(()=>{\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const isLoading = useSelector(state => state.main.isLoading)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(getCity(values.name, 'ADD'))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit} className={classes.form}>\r\n                <Input\r\n                    placeholder='Type here the city name' {...formik.getFieldProps('name')}\r\n                    onChange={formik.handleChange} value={formik.values.name}\r\n                />\r\n                <Button className={classes.button} type='submit' disabled={isLoading || !formik.values.name}\r\n                        variant='contained' color='primary'> Add City</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n})\r\n\r\n","export default __webpack_public_path__ + \"static/media/day.e170f8f7.svg\";","import React from \"react\";\r\nimport {CityCard} from \"../CardComponent/CardComponent\";\r\nimport \"./MainBody.css\";\r\nimport {SearchFormItem} from \"./SearchFormItem\";\r\nimport {Grid, makeStyles} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Preloader} from \"../Tools/Preloader\";\r\nimport MainIco from \"../Assets/day.svg\"\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n    }\r\n});\r\n\r\n\r\nexport const MainBody = React.memo(props => {\r\n    const classes = useStyles();\r\n\r\n    let cardAdd = props.cities.map(cities =>\r\n        <Grid\r\n            item\r\n            key={cities.id}\r\n        >\r\n            <Grid item>\r\n                <CityCard name={cities.name}\r\n                          main={cities.main}\r\n                          cityId={cities.id}\r\n                          wind={cities.wind}\r\n                          weather={cities.weather}\r\n                          icon={cities.weather[0].icon}\r\n                          sys={cities.sys}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n    const isLoading = useSelector(state => state.main.isLoading)\r\n    return (\r\n        <div className=\"mainWrap\">\r\n            <h1>Welcome to the weather widget! <img src={MainIco} alt=\"mainIco\"/></h1>\r\n            <h3>Click below to set your city</h3>\r\n            <SearchFormItem/>\r\n            {isLoading && <div><Preloader/></div>}\r\n            <Grid container className={classes.root} spacing={2}>\r\n                {cardAdd}\r\n            </Grid>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\n\r\n\r\nexport const convertTime = (hourUnix) => {\r\n    let date = new Date(hourUnix * 1000)\r\n    let hour = date.getHours()\r\n    let minutes = date.getMinutes()\r\n    return hour < 10\r\n        ? minutes < 10\r\n            ? `0${hour}:0${minutes}`\r\n            : `0${hour}:${minutes}`\r\n        : `${hour}:00`\r\n}","import React from 'react'\r\nimport {Chart} from 'react-google-charts'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {convertTime} from \"./Converter\";\r\nimport {Preloader} from \"./Preloader\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        maxWidth: \"600px\",\r\n        textAlign: \"center\"\r\n    }\r\n}));\r\n\r\nexport const GraphChart = React.memo((props) => {\r\n        let {detailCard} = props\r\n        const dataRound = (value) => {\r\n            return Math.round(value)\r\n        }\r\n        const classes = useStyles();\r\n\r\n        let dataHourly = detailCard.hourly?.map(el => {\r\n            let hour = convertTime(el.dt)\r\n            let temp = dataRound(el.temp)\r\n            let array = [hour, temp]\r\n            return array\r\n        })\r\n\r\n        let data = [['Hour', 'Temperature']]\r\n\r\n        if (dataHourly) {\r\n            for (let i = 0; i < 24; i++) {\r\n                data.push(dataHourly[i])\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Grid item style={{textAlign: 'center'}} className={classes.root}>\r\n                <Chart\r\n                    width={\"100%\"}\r\n                    height={\"100%\"}\r\n                    chartType='ColumnChart'\r\n                    loader={<div><Preloader/></div>}\r\n                    data={data}\r\n                    options={{\r\n                        hAxis: {title: 'Hour'},\r\n                        vAxis: {title: 'Temperature'},\r\n                        legend: 'none',\r\n                        title: \"Hourly temperature changing\",\r\n                        backgroundColor: 'transparent',\r\n                        series: {\r\n                            0: {color: '#d7d120'},\r\n                        },\r\n                    }}\r\n                />\r\n            </Grid>\r\n        )\r\n    }\r\n)\r\n","import React, {useEffect} from \"react\";\r\nimport {Grid, makeStyles} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getDetails} from \"../Redux/Card-reducers\";\r\nimport {getImage} from \"../Api/Api\";\r\nimport {convertTime} from \"../Tools/Converter\";\r\nimport {GraphChart} from \"../Tools/GraphChart\";\r\nimport \"./DetailPage.css\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        textAlign: \"-webkit-right\",\r\n        marginLeft: \"15px\"\r\n    },\r\n    content: {\r\n\r\n        background: \"rgb(48,107,101,0.8)\",\r\n        color: \"white\",\r\n        padding: \"15px\",\r\n        boxShadow: \"2px 2px 5px 2px rgb(169, 169, 101)\",\r\n        maxWidth: \"400px\",\r\n        width: \"100%\",\r\n        textAlign: \"left\",\r\n    },\r\n    button: {\r\n        background: \"rgb(48,107,101,0.8)\",\r\n        color: \"white\",\r\n        fontSize: \"18px\"\r\n    },\r\n    graph: {\r\n        background: \"rgb(48,107,101,0.8)\",\r\n        maxWidth: \"600px\",\r\n        marginTop: \"10px\",\r\n    },\r\n}));\r\n\r\n\r\nexport const DetailPage = React.memo((props) => {\r\n        const dispatch = useDispatch()\r\n        const classes = useStyles();\r\n\r\n        const cities = useSelector(state => state.cities.cities)\r\n        const detailCard = useSelector(state => state.cities.detailsPage)\r\n\r\n        const city = cities.find(el => el.name === cities[0].name)\r\n        const icon = city.weather[0].icon\r\n\r\n        let sunrise = convertTime(city.sys.sunrise);\r\n        let sunset = convertTime(city.sys.sunset);\r\n\r\n        useEffect(() => {\r\n            if (city) {\r\n                dispatch(getDetails(city.coord.lat, city.coord.lon))\r\n            }\r\n        }, [city, dispatch])\r\n\r\n        const dataRound = (value) => {\r\n            return Math.round(value)\r\n        }\r\n\r\n        return (\r\n            <div className=\"mainContentWrapp\">\r\n                <h2> Temperature: {dataRound(city.main.temp)} °C</h2>\r\n                <Grid container spacing={4} className={classes.root}>\r\n                    <Grid item xs={5}>\r\n                        <div className={classes.content}>\r\n                            <div>Feels like: {dataRound(city.main.feels_like)} C</div>\r\n                            <div>Humidity: {city.main.humidity} %</div>\r\n                            <div>Pressure: {city.main.pressure}</div>\r\n                            <div>Max temperature: {dataRound(city.main.temp_max)} °C</div>\r\n                            <div>Min temperature: {dataRound(city.main.temp_min)} °C</div>\r\n                            <div>Wind: {city.wind.speed} m/s {city.wind.deg} degree</div>\r\n                            <div>Sunrise: {sunrise}</div>\r\n                            <div>Sunset: {sunset}</div>\r\n                            <img alt=\"weatherIco\" src={getImage(icon)}/>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={5} className={classes.graph}>\r\n                        <GraphChart detailCard={detailCard}/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport {DetailPage} from \"./DetailPage\";\r\nimport {useHistory} from \"react-router\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {getFlag} from \"../Api/Api\";\r\nimport {useEffect} from \"react\";\r\nimport {getCurrentByAsk} from \"../Redux/Card-reducers\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n        textAlign: \"center\",\r\n        cursor: \"pointer\"\r\n    },\r\n    root: {\r\n        textAlign: \"center\",\r\n        background: \" none\"\r\n    },\r\n\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function FullScreenDialog() {\r\n    const dispatch = useDispatch()\r\n    const cities = useSelector(state => state.cities.cities)\r\n\r\n    useEffect(() => {\r\n        const localDataCards = localStorage.getItem('cityCards')\r\n        if (localDataCards && localDataCards !== '[]') {\r\n            let citiesId = JSON.parse(localDataCards).reverse().join()\r\n            dispatch(getCurrentByAsk(citiesId))\r\n        }\r\n    }, [dispatch])\r\n    useEffect(() => {\r\n        localStorage.setItem('cityCards', JSON.stringify(cities.map((el) => el.id)))\r\n    }, [cities])\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n    const history = useHistory()\r\n    const city = cities.find(el => el.name === cities[0].name)\r\n    const country = city.sys.country\r\n        .split(\"\")\r\n        .map(c => (c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()))\r\n        .join(\"\");\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        history.push(`/`)\r\n    };\r\n\r\n    return (\r\n        <div className=\"dialogPAge\">\r\n            <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}\r\n                    className={classes.root}>\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                            <CloseIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" className={classes.title} onClick={handleClose}>\r\n                            {city.name} <img alt=\"countryIco\" src={getFlag(country)} className={classes.flag}/>\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <DetailPage/>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import './App.css';\r\nimport {Route, Switch} from \"react-router\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useEffect} from \"react\";\r\nimport {getCurrentByAsk} from \"./Components/Redux/Card-reducers\";\r\nimport {MainBody} from \"./Components/MainBody/MainBody\";\r\nimport FullScreenDialog from \"./Components/DetailPage/DetailPAgeSlider\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const cities = useSelector(state => state.cities.cities)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        const localDataCards = localStorage.getItem('cityCards')\r\n        if (localDataCards && localDataCards !== '[]') {\r\n            let citiesId = JSON.parse(localDataCards).reverse().join()\r\n            dispatch(getCurrentByAsk(citiesId))\r\n        }\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('cityCards', JSON.stringify(cities.map((el) => el.id)))\r\n    }, [cities])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Switch>\r\n                <Route path=\"/city/:name\"> <FullScreenDialog/> </Route>\r\n                <Route exact path=\"/\"> <MainBody cities={cities}/> </Route>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {mainReducer} from \"./mainReducer\";\r\nimport {cardsReducer} from \"./Card-reducers\";\r\n\r\nconst {combineReducers} = require(\"redux\");\r\n\r\nlet reducers = combineReducers({\r\n    cities: cardsReducer,\r\n    main: mainReducer\r\n})\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./index.css\";\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./Components/Redux/Redux-store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n            <App/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}