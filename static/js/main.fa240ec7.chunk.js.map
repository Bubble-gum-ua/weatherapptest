{"version":3,"sources":["Components/Api/Api.js","Components/Redux/mainReducer.js","Components/Redux/Card-reducers.jsx","Components/Tools/Converter.jsx","Components/Assets/preloader.svg","Components/Tools/Preloader.jsx","Components/Tools/GraphChart.jsx","Components/DetailPage/DetailPage.jsx","Components/CardComponent/CardComponent.jsx","Components/MainBody/SearchFormItem.jsx","Components/Assets/day.svg","Components/MainBody/MainBody.jsx","Components/DetailPage/DetailPAgeSlider.jsx","App.js","reportWebVitals.js","Components/Redux/Redux-store.js","index.js"],"names":["instance","axios","baseURL","API_KEY","currentWeatherApi","name","get","then","res","data","citiesId","lat","lon","getImage","icon","getFlag","country","IS_LOADING","SET_ERROR","initialState","isLoading","error","toggleIsLoading","type","setError","ADD_CARD","DELETE_CARD","UPDATE_BODY","SET_DETAILS_PAGE","cities","detailsPage","addCard","card","getCity","action","dispatch","getState","a","result","isCopyName","find","el","id","convertTime","hourUnix","date","Date","hour","getHours","minutes","getMinutes","Preloader","src","preloader","alt","GraphChart","React","memo","props","detailCard","dataHourly","hourly","map","value","dt","temp","Math","round","i","push","Grid","item","style","textAlign","width","height","chartType","loader","options","hAxis","title","vAxis","legend","backgroundColor","colors","series","0","color","useStyles","makeStyles","theme","root","flexGrow","marginLeft","content","background","padding","boxShadow","maxWidth","button","fontSize","graph","marginTop","DetailPage","useDispatch","classes","useSelector","state","city","weather","sunrise","sys","sunset","useEffect","coord","dataRound","className","main","container","spacing","xs","feels_like","humidity","pressure","temp_max","temp_min","wind","speed","deg","cursor","paper","palette","text","secondary","CityCard","cityId","split","c","toUpperCase","toLowerCase","join","history","useHistory","CardContent","Paper","onClick","Button","variant","startIcon","form","margin","SearchFormItem","formik","useFormik","initialValues","onSubmit","values","resetForm","handleSubmit","Input","placeholder","getFieldProps","onChange","handleChange","disabled","minWidth","MainBody","cardAdd","MainIco","appBar","position","flex","Transition","forwardRef","ref","Slide","direction","FullScreenDialog","useState","open","setOpen","handleClose","Dialog","fullScreen","onClose","TransitionComponent","AppBar","Toolbar","IconButton","edge","aria-label","Typography","flag","App","localDataCards","localStorage","getItem","JSON","parse","reverse","list","forEach","getCurrentByAsk","setItem","stringify","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","require","cardsNum","findIndex","filter","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa240ec7.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://api.openweathermap.org/data/2.5/`\r\n});\r\n\r\nconst API_KEY = '85132d4ddae160c1f8dcd7eea2cb7f41';\r\n\r\n\r\nexport const currentWeatherApi = {\r\n    getCurrentData(name) {\r\n        return instance.get(`weather?appid=${API_KEY}&units=metric&q=${name}`)\r\n            .then(res => res.data)\r\n    },\r\n    getCurrentWeatherByAsk(citiesId) {\r\n        return instance.get(`group?id=${citiesId}&appid=${API_KEY}&units=metric`)\r\n            .then(res => res.data)\r\n    },\r\n    getWeatherByHours(lat, lon) {\r\n        return instance.get(`onecall?lat=${lat}&lon=${lon}&exclude=daily,alerts,minutely&appid=${API_KEY}&units=metric`)\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\nexport const getImage = (icon)=>{\r\n    return `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n}\r\n\r\nexport const getFlag = (country) => {\r\n    return `https://openweathermap.org/images/flags/${country}.png`\r\n}","const IS_LOADING = 'TOGGLE_IS_LOADING'\r\nconst SET_ERROR = 'SET_ERROR'\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    error: null\r\n}\r\n\r\nexport const mainReducer = (state = initialState, action)  => {\r\n    switch (action.type) {\r\n        case IS_LOADING: {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case SET_ERROR: {\r\n            return {...state, error: action.error}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleIsLoading = (isLoading) => ({type: IS_LOADING, isLoading})\r\nexport const setError = (error) => ({type: SET_ERROR, error})","import React from \"react\";\r\nimport {currentWeatherApi} from \"../Api/Api\";\r\nimport {setError, toggleIsLoading} from \"./mainReducer\";\r\n\r\nconst ADD_CARD = \"ADD_CARD\";\r\nconst DELETE_CARD = \"DELETE_CARD\";\r\nconst UPDATE_BODY = \"UPDATE_BODY\";\r\nconst SET_DETAILS_PAGE = \"SET_DETAILS_PAGE\";\r\n\r\nconst initialState = {\r\n    cities: [],\r\n    detailsPage: {}\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_BODY:\r\n            const cardsNum = state.cities.findIndex(el => el.id === action.card.id)\r\n            state.cities[cardsNum] = action.card\r\n            return {\r\n                ...state,\r\n                cities: [...state.cities]\r\n            }\r\n        case  ADD_CARD: {\r\n            return {\r\n                ...state,\r\n                cities: [action.card, ...state.cities]\r\n            }\r\n        }\r\n        case  DELETE_CARD: {\r\n            return {\r\n                ...state,\r\n                cities: state.cities.filter(el => el.id !== action.citiesId)\r\n            }\r\n        }\r\n        case  SET_DETAILS_PAGE: {\r\n            return {\r\n                ...state,\r\n                detailsPage: action.detailsPage\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nexport const addCard = (card) => ({type: ADD_CARD, card});\r\nexport const updateBody = (card) => ({type: UPDATE_BODY, card});\r\nexport const setDetailPage = (detailsPage) => ({type: SET_DETAILS_PAGE, detailsPage});\r\nexport const deleteCard = (citiesId) => ({type: DELETE_CARD, citiesId});\r\n\r\n\r\nexport const getCity = (name, action) => {\r\n    return async (dispatch,getState) => {\r\n        try {\r\n            dispatch(toggleIsLoading(true))\r\n            let result = await currentWeatherApi.getCurrentData(name)\r\n            if (action === \"ADD\") {\r\n                const isCopyName = getState().cities.cities.find(el => el.id === result.id)\r\n                isCopyName ? dispatch(setError(\"City was picked\")) : dispatch(addCard(result))\r\n            } else if (action === \"UPDATE\") {\r\n                dispatch(updateBody(result))\r\n            }\r\n            dispatch(toggleIsLoading(false))\r\n        } catch (err) {\r\n            dispatch(setError(\"Not found. Try again.\"))\r\n            dispatch(toggleIsLoading(false))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCurrentByAsk = (citiesId) => async (dispatch) => {\r\n    try {\r\n        dispatch(toggleIsLoading(true))\r\n        let result = await currentWeatherApi.getCurrentWeatherByAsk(citiesId)\r\n        result.list.forEach(el => dispatch(addCard(el)))\r\n        dispatch(toggleIsLoading(false))\r\n    } catch (err) {\r\n        dispatch(setError(\"Error\"))\r\n        dispatch(toggleIsLoading(false))\r\n    }\r\n}\r\n\r\nexport const getDetails = (lat, lon) => async (dispatch) => {\r\n    try {\r\n        dispatch(toggleIsLoading(true))\r\n        let result = await currentWeatherApi.getWeatherByHours(lat, lon)\r\n        dispatch(setDetailPage(result))\r\n        dispatch(toggleIsLoading(false))\r\n    } catch (err) {\r\n        dispatch(setError(\"Error\"))\r\n        dispatch(toggleIsLoading(false))\r\n    }\r\n}\r\n\r\n","\r\n\r\n\r\nexport const convertTime = (hourUnix) => {\r\n    let date = new Date(hourUnix * 1000)\r\n    let hour = date.getHours()\r\n    let minutes = date.getMinutes()\r\n    return hour < 10\r\n        ? minutes < 10\r\n            ? `0${hour}:0${minutes}`\r\n            : `0${hour}:${minutes}`\r\n        : `${hour}:00`\r\n}","export default __webpack_public_path__ + \"static/media/preloader.7eb91340.svg\";","import React from \"react\";\r\nimport preloader from \"../Assets/preloader.svg\"\r\n\r\nexport const Preloader = () => {\r\n    return <div>\r\n        <img src={preloader} alt=\"preloader\"/>\r\n    </div>\r\n}","import React from 'react'\r\nimport {Chart} from 'react-google-charts'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {convertTime} from \"./Converter\";\r\nimport {Preloader} from \"./Preloader\";\r\n\r\n\r\nexport const GraphChart = React.memo((props) => {\r\n        let {detailCard} = props\r\n        const dataRound = (value) => {\r\n            return Math.round(value)\r\n        }\r\n\r\n        let dataHourly = detailCard.hourly?.map(el => {\r\n            let hour = convertTime(el.dt)\r\n            let temp = dataRound(el.temp)\r\n            let array = [hour, temp]\r\n            return array\r\n        })\r\n\r\n        let data = [['Hour', 'Temperature']]\r\n\r\n        if (dataHourly) {\r\n            for (let i = 0; i < 24; i++) {\r\n                data.push(dataHourly[i])\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Grid item style={{textAlign: 'center'}}>\r\n                <Chart\r\n                    width={'600px'}\r\n                    height={'400px'}\r\n                    chartType='ColumnChart'\r\n                    loader={<div><Preloader/></div>}\r\n                    data={data}\r\n                    options={{\r\n                        hAxis: {title: 'Hour'},\r\n                        vAxis: {title: 'Temperature'},\r\n                        legend: 'none',\r\n                        title: \"Hourly temperature changing\",\r\n                        backgroundColor: 'transparent',\r\n                        colors: [\"white\", \"white\",],\r\n                        series: {\r\n                            0: {color: '#d7d120'},\r\n                        }\r\n                    }}\r\n                />\r\n            </Grid>\r\n        )\r\n    }\r\n)\r\n","import React, {useEffect} from \"react\";\r\nimport {Grid, makeStyles} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getDetails} from \"../Redux/Card-reducers\";\r\nimport {getFlag, getImage} from \"../Api/Api\";\r\nimport {convertTime} from \"../Tools/Converter\";\r\nimport {GraphChart} from \"../Tools/GraphChart\";\r\nimport \"./DetailPage.css\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        textAlign: \"-webkit-right\",\r\n        marginLeft: \"15px\"\r\n    },\r\n    content: {\r\n\r\n        background: \"rgb(48,107,101,0.8)\",\r\n        color: \"white\",\r\n        padding: \"15px\",\r\n        boxShadow: \"2px 2px 5px 2px rgb(169, 169, 101)\",\r\n        maxWidth: \"400px\",\r\n        width: \"100%\",\r\n        textAlign: \"left\",\r\n    },\r\n    button: {\r\n        background: \"rgb(48,107,101,0.8)\",\r\n        color: \"white\",\r\n        fontSize: \"18px\"\r\n    },\r\n    graph: {\r\n        background: \"rgb(48,107,101,0.8)\",\r\n        maxWidth: \"600px\",\r\n        marginTop: \"10px\"\r\n    },\r\n}));\r\n\r\n\r\nexport const DetailPage = React.memo((props) => {\r\n        const dispatch = useDispatch()\r\n        const classes = useStyles();\r\n\r\n        const cities = useSelector(state => state.cities.cities)\r\n        const detailCard = useSelector(state => state.cities.detailsPage)\r\n\r\n        const city = cities.find(el => el.name === cities[0].name)\r\n        const icon = city.weather[0].icon\r\n\r\n        let sunrise = convertTime(city.sys.sunrise);\r\n        let sunset = convertTime(city.sys.sunset);\r\n\r\n        useEffect(() => {\r\n            if (city) {\r\n                dispatch(getDetails(city.coord.lat, city.coord.lon))\r\n            }\r\n        }, [city, dispatch])\r\n\r\n        const dataRound = (value) => {\r\n            return Math.round(value)\r\n        }\r\n        return (\r\n            <div className=\"mainContentWrapp\">\r\n                <h2> Temperature: {dataRound(city.main.temp)} °C</h2>\r\n                <Grid container spacing={4} className={classes.root}>\r\n                    <Grid item xs={5}>\r\n                        <div className={classes.content}>\r\n                            <div>Feels like: {dataRound(city.main.feels_like)} C</div>\r\n                            <div>Humidity: {city.main.humidity} %</div>\r\n                            <div>Pressure: {city.main.pressure}</div>\r\n                            <div>Max temperature: {dataRound(city.main.temp_max)} °C</div>\r\n                            <div>Min temperature: {dataRound(city.main.temp_min)} °C</div>\r\n                            <div>Wind: {city.wind.speed} m/s {city.wind.deg} degree</div>\r\n                            <div>Sunrise: {sunrise}</div>\r\n                            <div>Sunset: {sunset}</div>\r\n                            <img alt=\"weatherIco\" src={getImage(icon)}/>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={3} className={classes.graph}>\r\n                        <GraphChart detailCard={detailCard}/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import React from \"react\";\r\nimport {Button, CardContent, Grid, makeStyles, Paper} from \"@material-ui/core\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport RefreshRoundedIcon from '@material-ui/icons/RefreshRounded'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {deleteCard, getCity} from \"../Redux/Card-reducers\";\r\nimport {getFlag, getImage} from \"../Api/Api\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {Preloader} from \"../Tools/Preloader\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        cursor: 'pointer',\r\n\r\n\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'left',\r\n        color: theme.palette.text.secondary,\r\n        cursor: 'pointer',\r\n        maxWidth: \"300px\",\r\n        backgroundColor:\"rgb(166, 217, 155)\"\r\n    },\r\n    button: {\r\n        backgroundColor: \"blue\",\r\n        cursor: \"pointer\"\r\n    }\r\n}));\r\n\r\nexport const CityCard = React.memo((props) => {\r\n\r\n    let {name, main, wind, icon, cityId, weather,sys} = props\r\n    const country = sys.country\r\n        .split(\"\")\r\n        .map(c => (c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()))\r\n        .join(\"\");\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteCardS = () => {\r\n        dispatch(deleteCard(cityId))\r\n    }\r\n\r\n    const refreshCard = () => {\r\n        dispatch(getCity(name, 'UPDATE'))\r\n    }\r\n\r\n    const redirect = () => {\r\n        history.push(`/city/${name}`)\r\n    }\r\n    const dataRound = (value) => {\r\n        return Math.round(value)\r\n    }\r\n    const isLoading = useSelector(state => state.main.isLoading);\r\n    return (\r\n        <div className={classes.root}>\r\n            <CardContent>\r\n                {isLoading && <div><Preloader/></div>}\r\n                <Paper className={classes.paper} >\r\n                    <h3> {name} <img alt=\"countryIco\" src={getFlag(country)}/></h3>\r\n                    <Grid container spacing={2} onClick={redirect}>\r\n                        <Grid item xs={6}>\r\n                            <div>Temperature: {dataRound(main.temp)} °C</div>\r\n                            <div>Sky: {weather[0].main} </div>\r\n                            <div>Wind: {dataRound(wind.speed)} m/s</div>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <img alt=\"weatherIco\" src={getImage(icon)}/>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={refreshCard}\r\n                        startIcon={<RefreshRoundedIcon/>}>\r\n                        Reload Data\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={deleteCardS}\r\n                        className={classes.button}\r\n                        startIcon={<DeleteIcon/>}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </Paper>\r\n            </CardContent>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {getCity} from \"../Redux/Card-reducers\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Button, Input, makeStyles} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        color: \"white\",\r\n        background: \"blue\"\r\n    },\r\n    form: {\r\n        background: \"rgb(54,102,191,0.8)\",\r\n        margin: \"15px\",\r\n        padding: \"15px\"\r\n    }\r\n});\r\n\r\nexport const SearchFormItem = React.memo(()=>{\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n    const isLoading = useSelector(state => state.main.isLoading)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(getCity(values.name, 'ADD'))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit} className={classes.form}>\r\n                <Input\r\n                    placeholder='Type here the city name' {...formik.getFieldProps('name')}\r\n                    onChange={formik.handleChange} value={formik.values.name}\r\n                />\r\n                <Button className={classes.button} type='submit' disabled={isLoading || !formik.values.name}\r\n                        variant='contained' color='primary'> Add City</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n})\r\n\r\n","export default __webpack_public_path__ + \"static/media/day.c33ef664.svg\";","import React from \"react\";\r\nimport {CityCard} from \"../CardComponent/CardComponent\";\r\nimport \"./MainBody.css\";\r\nimport {SearchFormItem} from \"./SearchFormItem\";\r\nimport {Grid, makeStyles} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Preloader} from \"../Tools/Preloader\";\r\nimport MainIco from \"../Assets/day.svg\"\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n    }\r\n});\r\n\r\nexport const MainBody = React.memo(props => {\r\n    const classes = useStyles();\r\n\r\n    let cardAdd = props.cities.map(cities =>\r\n        <Grid item>\r\n            <Grid item>\r\n                <CityCard name={cities.name}\r\n                          main={cities.main}\r\n                          cityId={cities.id}\r\n                          wind={cities.wind}\r\n                          weather={cities.weather}\r\n                          icon={cities.weather[0].icon}\r\n                          sys={cities.sys}/>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n    const isLoading = useSelector(state => state.main.isLoading)\r\n\r\n    return (\r\n        <div className=\"mainWrap\">\r\n            <h1>Welcome to the weather widget! <img src={MainIco} alt=\"mainIco\"/></h1>\r\n            <h3>Click below to set your city</h3>\r\n            <SearchFormItem/>\r\n            {isLoading && <div><Preloader/></div>}\r\n            <Grid container className={classes.root} spacing={2}>\r\n                {cardAdd}\r\n            </Grid>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport {DetailPage} from \"./DetailPage\";\r\nimport {useHistory} from \"react-router\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getFlag} from \"../Api/Api\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n        textAlign: \"center\",\r\n        cursor: \"pointer\"\r\n    },\r\n    root: {\r\n        textAlign: \"center\",\r\n        background:\" none\"\r\n    },\r\n\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function FullScreenDialog() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(true);\r\n    const history = useHistory()\r\n    const cities = useSelector(state => state.cities.cities)\r\n    const city = cities.find(el => el.name === cities[0].name)\r\n    const country = city.sys.country\r\n        .split(\"\")\r\n        .map(c => (c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()))\r\n        .join(\"\");\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        history.push(`/`)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}\r\n                    className={classes.root}>\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                            <CloseIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" className={classes.title} onClick={handleClose}>\r\n                            {city.name} <img alt=\"countryIco\" src={getFlag(country)} className={classes.flag}/>\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <DetailPage/>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import './App.css';\nimport {DetailPage} from \"./Components/DetailPage/DetailPage\";\nimport {Route, Switch} from \"react-router\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useEffect} from \"react\";\nimport {getCurrentByAsk} from \"./Components/Redux/Card-reducers\";\nimport {MainBody} from \"./Components/MainBody/MainBody\";\nimport FullScreenDialog from \"./Components/DetailPage/DetailPAgeSlider\";\n\n\nfunction App() {\n\n    const cities = useSelector(state => state.cities.cities)\n    const dispatch = useDispatch()\n\n\n    useEffect(() => {\n        const localDataCards = localStorage.getItem('cityCards')\n        if (localDataCards && localDataCards !== '[]') {\n            let citiesId = JSON.parse(localDataCards).reverse().join()\n            dispatch(getCurrentByAsk(citiesId))\n        }\n    }, [dispatch])\n\n    useEffect(() => {\n        localStorage.setItem('cityCards', JSON.stringify(cities.map((el) => el.id)))\n    }, [cities])\n\n    return  (\n        <div className=\"App\">\n            <Switch>\n               {/* <Route path=\"/city/:name\"> <DetailPage/> </Route>*/}\n                <Route path=\"/city/:name\"> <FullScreenDialog/> </Route>\n                <Route exact path=\"/\"> <MainBody cities={cities}/> </Route>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {mainReducer} from \"./mainReducer\";\r\nimport {cardsReducer} from \"./Card-reducers\";\r\n\r\nconst {combineReducers} = require(\"redux\");\r\n\r\nlet reducers = combineReducers({\r\n    cities: cardsReducer,\r\n    main: mainReducer\r\n})\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./Components/Redux/Redux-store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n            <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}